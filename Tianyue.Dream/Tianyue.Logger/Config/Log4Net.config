<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <!--添加自定义节点：log4net type：解析类名，程序集名(log4net.dll)-->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <log4net>
    <root>
      <!--<level value="DEBUG"/>-->
      <!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->
      <!--比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录-->
      <level value="ALL"/>
      <!--根据log级别记录到不同的日志文件-->
      <appender-ref ref="DebugLogger" />
      <appender-ref ref="InfoLogger" />
      <appender-ref ref="WarnLogger" />
      <appender-ref ref="ErrorLogger" />
      <appender-ref ref="FatalLogger" />
    </root>

    <!--Debug文件日志记录器-->
    <appender name="DebugLogger" type="log4net.Appender.RollingFileAppender">
      <!--日志存放文件夹-->
      <file value="Log\Debug\"/>
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <!--使用UTF-8编码-->
      <Encoding value="UTF-8" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <maxSizeRollBackups value="-1"/>
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date" />
      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->
      <param name="datePattern" value="yyyy/yyyy-MM/yyyy-MM-dd.'log'" />
      <!--过滤设置，LevelRangeFilter为使用的过滤器。-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="DEBUG" />
        <levelMax value="DEBUG" />
      </filter>
      <!--日志格式-->
      <layout type="log4net.Layout.PatternLayout">
        <!-- 输出格式 日期，日志级别，消息，换行-->
        <param name="ConversionPattern" value="%date [%-5p] %message%n" />
      </layout>
    </appender>

    <!--InfoLog文件日志记录器-->
    <appender name="InfoLogger" type="log4net.Appender.RollingFileAppender">
      <!--日志存放文件夹-->
      <file value="Log\Info\"/>
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <!--使用UTF-8编码-->
      <Encoding value="UTF-8" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <maxSizeRollBackups value="-1"/>
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date" />
      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->
      <param name="datePattern" value="yyyy/yyyy-MM/yyyy-MM-dd.'log'" />
      <!--过滤设置，LevelRangeFilter为使用的过滤器。-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="INFO" />
        <levelMax value="INFO" />
      </filter>
      <!--日志格式-->
      <layout type="log4net.Layout.PatternLayout">
        <!-- 输出格式 日期，日志级别，消息，换行-->
        <param name="ConversionPattern" value="%date [%-5p] %message%n" />
      </layout>
    </appender>

    <!--WarnLog文件日志记录器-->
    <appender name="WarnLogger" type="log4net.Appender.RollingFileAppender">
      <!--日志存放文件夹-->
      <file value="Log\Warn\"/>
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <!--使用UTF-8编码-->
      <Encoding value="UTF-8" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <maxSizeRollBackups value="-1"/>
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date" />
      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->
      <param name="datePattern" value="yyyy/yyyy-MM/yyyy-MM-dd.'log'" />
      <!--过滤设置，LevelRangeFilter为使用的过滤器。-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="WARN" />
        <levelMax value="WARN" />
      </filter>
      <!--日志格式-->
      <layout type="log4net.Layout.PatternLayout">
        <!-- 输出格式 日期，日志级别，消息，换行-->
        <param name="ConversionPattern" value="%date [%-5p] %message%n" />
      </layout>
    </appender>

    <!--ErrorLog文件日志记录器-->
    <appender name="ErrorLogger" type="log4net.Appender.RollingFileAppender">
      <!--日志存放文件夹-->
      <file value="Log\Error\"/>
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <!--使用UTF-8编码-->
      <Encoding value="UTF-8" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <maxSizeRollBackups value="-1"/>
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date" />
      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->
      <param name="datePattern" value="yyyy/yyyy-MM/yyyy-MM-dd.'log'" />
      <!--过滤设置，LevelRangeFilter为使用的过滤器。-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="ERROR" />
        <levelMax value="ERROR" />
      </filter>
      <!--日志格式-->
      <layout type="log4net.Layout.PatternLayout">
        <!-- 输出格式 日期，日志级别，消息，换行-->
        <param name="ConversionPattern" value="%date [%-5p] %message%n" />
      </layout>
    </appender>

    <!--FatalLog文件日志记录器-->
    <appender name="FatalLogger" type="log4net.Appender.RollingFileAppender">
      <!--日志存放文件夹-->
      <file value="Log\Fatal\"/>
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <!--使用UTF-8编码-->
      <Encoding value="UTF-8" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <maxSizeRollBackups value="-1"/>
      <!--是否只写到一个文件中-->
      <StaticLogFileName value="false"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date" />
      <!--日期的格式，每天换一个文件记录，如不设置则永远只记录一天的日志，需设置-->
      <param name="datePattern" value="yyyy/yyyy-MM/yyyy-MM-dd.'log'" />
      <!--过滤设置，LevelRangeFilter为使用的过滤器。-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="FATAL" />
        <levelMax value="FATAL" />
      </filter>
      <!--日志格式-->
      <layout type="log4net.Layout.PatternLayout">
        <!-- 输出格式 日期，日志级别，消息，换行-->
        <param name="ConversionPattern" value="%date [%-5p] %message%n" />
      </layout>
    </appender>


    <!-- name属性指定其名称,type则是log4net.Appender命名空间的一个类的名称,意思是,指定使用哪种介质    -->
    <!-- 数据库日志-Debug（每一个appender节点，代表一个记录日志的方式）  -->
    <appender name="AdoNetAppender_Debug" type="log4net.Appender.AdoNetAppender">
      <!--日志缓存写入条数 设置为0时只要有一条就立刻写到数据库 生产环境可改为10-100写入一次-->
      <bufferSize value="0" />
      <!-- 日志数据库连接类型（此处写错会导致无法写入数据库） -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <!-- 日志数据库连接字符串 -->
      <connectionString value="Server=127.0.0.1;DataBase=Test; User ID=sa;Password=sa"/>
      <!-- 日志数据库执行SQL语句 -->
      <commandText value="INSERT INTO ApplicationLog_Debug(LogDate, Level, Logger, Message, Exception)VALUES(@logdate, @loglevel, @logger, @message, @exception)"/>
      <!-- 参数-日志时间 -->
      <parameter>
        <parameterName value="@logdate" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout"/>
      </parameter>
      <!-- 参数-日志级别 -->
      <parameter>
        <parameterName value="@loglevel" />
        <dbType value="String" />
        <size value="200" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%p" />
        </layout>
      </parameter>
      <!-- 参数-日志名称 -->
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="500" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%c" />
        </layout>
      </parameter>
      <!-- 参数-日志内容（size是最大长度，超出则直接去到该长度的内容） -->
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%m" />
        </layout>
      </parameter>
      <!-- 参数-异常内容（Exception会记录异常的所有信息，如：System.NullReferenceException: 未将对象引用设置到对象的实例。
   在 TestLog4Net.Program.Main(String[] args) 位置 d:\TestDemo_Tyh\TestLog4Net\TestLog4Net\Program.cs:行号 41） -->
      <parameter>
        <parameterName value="@exception"/>
        <dbType value="String"/>
        <size value="4000"/>
        <layout type="log4net.Layout.ExceptionLayout"/>
      </parameter>
    </appender>
    
    <!-- 数据库日志-Info -->
    <appender name="AdoNetAppender_Info" type="log4net.Appender.AdoNetAppender">
      <!-- 表示是记录10条到缓冲区，满10条后再写入SQL server 调试时可以改为1，实际应用建议为100 -->
      <bufferSize value="0" />
      <!-- 数据库连接类型 -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <!-- 数据库连接字符串 -->
      <connectionString value="Server=127.0.0.1;DataBase=Test; User ID=sa;Password=sa"/>
      <!-- 执行SQL语句 -->
      <commandText value="INSERT INTO ApplicationLog_Info(LogDate, Level, Logger, Message, Exception)VALUES(@logdate, @loglevel, @logger, @message, @exception)"/>
      <!-- 参数赋值 -->
      <parameter>
        <parameterName value="@logdate" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout"/>
      </parameter>
      <parameter>
        <parameterName value="@loglevel" />
        <dbType value="String" />
        <size value="200" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%p" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="500" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%m" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@exception"/>
        <dbType value="String"/>
        <size value="4000"/>
        <layout type="log4net.Layout.ExceptionLayout"/>
      </parameter>
    </appender>
    
  </log4net>
</configuration>