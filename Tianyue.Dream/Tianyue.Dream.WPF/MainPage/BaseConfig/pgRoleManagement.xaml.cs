using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Tianyue.Domain;
using Tianyue.Domain.Configuration;
using Tianyue.Domain.Enum;
using Tianyue.Facade;
using Tianyue.Utility.Extension;
using Tianyue.Utility.Helper;
using Tianyue.Wpf.Control;

namespace Tianyue.Dream.WPF.MainPage
{
    /// <summary>
    /// pgPageFunction.xaml 的交互逻辑
    /// </summary>
    public partial class pgRoleManagement : Page
    {
        public pgRoleManagement()
        {
            InitializeComponent();
        }

        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            PageQuery_Click(null, null);
        }

        private Role roleEdit = null;

        private void PageQuery_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                PageQuery_Click(null, null);
            }
        }

        private void PageQuery_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Role role = new Role();
                role.RoleCode = txtQueryRoleCode.Text;
                role.RoleName = txtQueryRoleName.Text;

                List<RoleView> lstRole = GlobalFacade.ConfigurationFacade.GetRoleList(role).ToList();

                dgQuery.ItemsSource = lstRole;

            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg("btnLogin_Click>>" + ex.Message, true);
            }

        }

        /// <summary>
        /// gridview的绑定列方法，用于隐藏一些列
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {
                DataGrid dg = (DataGrid)sender;
                Hashtable htDataGridColumn = new Hashtable();
                RoleView roleView = new RoleView();

                Hashtable htAllProperty = ClassHelper.TraversePropertyType(roleView);
               
                foreach(DictionaryEntry property in htAllProperty)
                {
                    if (!property.Value.ToString().Contains("Guid"))
                    {
                        htDataGridColumn.Add(property.Key, "");
                    }
                }
                
                foreach (DataGridColumn c in dg.Columns)
                {
                    if (!htDataGridColumn.Contains(c.SortMemberPath))
                    {
                        c.Visibility = Visibility.Hidden;
                    }
                }
                //LanguageHelper.SetDataGridViewLanguage(dg);
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".radGridView_AutoGeneratedColumns>>" + ex.Message, true);
            }
        }

        private void DataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (this.dgQuery.SelectedIndex == -1)
            {
                return;
            }

            RoleView roleSelect = dgQuery.Items[dgQuery.SelectedIndex] as RoleView;

            if (roleSelect == null)
            {
                return;
            }

            roleEdit = new Role();
            roleEdit.RID = roleSelect.RID;
            roleEdit.RoleCode = roleSelect.RoleCode;
            roleEdit.RoleName = roleSelect.RoleName;
            roleEdit.Sequence = roleSelect.Sequence;
            roleEdit.Description = roleSelect.Description;
            roleEdit.CreatedUser = roleSelect.CreatedUserGuid;
            roleEdit.CreatedTime = roleSelect.CreatedTime;
            roleEdit.Disable = roleSelect.Disable;

            //tbMainContent.SelectedItem = tbiEdit;

            txtRoleCodeEdit.Text = roleEdit.RoleCode;
            txtRoleNameEdit.Text = roleEdit.RoleName;
            txtSequenceEdit.Text = roleEdit.Sequence.ToString();
            txtDescriptionEdit.Text = roleEdit.Description;
            cbDisableEdit.IsChecked = roleEdit.Disable;

            tbMainContent.SelectedItem = tbiEdit;
        }

        private void btnSubmitEdit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                roleEdit = VerifyData(OperationType.Edit);

                if (roleEdit == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.UpdateSingleRole(roleEdit);

            }
            catch (Exception excp)
            {

            }
        }

        private void btnCancelEdit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSubmitAdd_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Role roleAdd = new Role();
                roleAdd = VerifyData(OperationType.Add);

                if (roleAdd == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.InsertSingleRole(roleAdd);

            }
            catch(Exception excp)
            {

            }
        }

        private void btnCancelAdd_Click(object sender, RoutedEventArgs e)
        {

        }


        private Role VerifyData(OperationType operationType)
        {
            Role role = new Role();
            if(operationType == OperationType.Add)
            {
                if(txtRoleCodeAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtRoleNameAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtRoleRouteAdd.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //    return null;
                //}
                //if (txtPageParameterAdd.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                
                role.RID = Guid.NewGuid();;
                role.RoleCode = txtRoleCodeAdd.Text;
                role.RoleName = txtRoleNameAdd.Text;
                //role.PageRoute = txtPageRouteAdd.Text;
                //role.PageParameter = txtPageParameterAdd.Text;
                role.Sequence = Int32.Parse(txtSequenceAdd.Text);
                role.Description = txtDescriptionAdd.Text;
                role.Disable = cbDisableAdd.IsChecked == null ? false : (bool)cbDisableAdd.IsChecked;
                role.CreatedUser = GlobalVariable.UserEntity.UID;
                role.CreatedTime = DateTime.Now;
            }
            else
            {
                if (roleEdit == null)
                    return null;

                if (txtRoleCodeEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtRoleNameEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtRoleRouteEdit.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //    return null;
                //}
                //if (txtPageParameterEdit.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }

                role.RID = roleEdit.RID;
                role.RoleCode = txtRoleCodeEdit.Text;
                role.RoleName = txtRoleNameEdit.Text;
                //role.PageRoute = txtPageRouteEdit.Text;
                //role.PageParameter = txtPageParameterEdit.Text;
                role.Sequence = Int32.Parse(txtSequenceEdit.Text);
                role.Description = txtDescriptionEdit.Text;
                role.Disable = cbDisableEdit.IsChecked == null ? false : (bool)cbDisableEdit.IsChecked;
                role.CreatedUser = roleEdit.CreatedUser;
                role.CreatedTime = roleEdit.CreatedTime;
                role.ModifiedUser = GlobalVariable.UserEntity.UID;
                role.ModifiedTime = DateTime.Now;

            }

            return role;

        }
        
        private void txtSequence_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            try
            {
                if ((e.Key >= Key.NumPad0 && e.Key <= Key.NumPad9) ||
                    (e.Key >= Key.D0 && e.Key <= Key.D9) || e.Key == Key.Back ||
                     e.Key == Key.Left || e.Key == Key.Right)
                {
                    if (e.KeyboardDevice.Modifiers != ModifierKeys.None)
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (e.Key != Key.Tab)
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".txtPackingQtyE_PreviewKeyDown>>" + ex.Message, true);
            }
        }

        private void SetQuery_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                SetQuery();
            }
        }

        private void SetQuery_TextChanged(object sender, TextChangedEventArgs e)
        {
            SetQuery();
        }

        private void SetQuery_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SetQuery();

            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg("btnLogin_Click>>" + ex.Message, true);
            }

        }

        private void SetQuery()
        {
            try
            {
                Role roleQuery = new Role();
                roleQuery.RoleCode = txtRoleCodeSet.Text;
                roleQuery.RoleName = txtRoleNameSet.Text;
                List<RoleView> lstUser = GlobalFacade.ConfigurationFacade.GetRoleList(roleQuery).ToList();

                dgRoleSet.ItemsSource = null;
                dgRoleSet.ItemsSource = lstUser;

            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg("btnLogin_Click>>" + ex.Message, true);
            }
        }

        private void dgRoleSet_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //List<CatalogFunctionView> lstCatalogFunction = GlobalFacade.ConfigurationFacade.GetAllCatalogFunction().FindAll(r => r.Disable == false).ToList();
            
            //List<TreeViewModel> lstTreeViewModel = new List<TreeViewModel>();
            //for (int i = 0; i < lstCatalogFunction.Count; i++)
            //{
            //    if (!lstTreeViewModel.Exists(t => t.NodeName == lstCatalogFunction[i].CatalogName))
            //    {
            //        TreeViewModel treeViewParent = new TreeViewModel(lstCatalogFunction[i].CatalogName);
            //        TreeViewModel treeViewChildren = new TreeViewModel(lstCatalogFunction[i].FunctionName);
            //        treeViewParent.Children.Add(treeViewChildren);
                   
            //        lstTreeViewModel.Add(treeViewParent);
            //    }
            //    else
            //    {
            //        TreeViewModel treeViewChildren = new TreeViewModel(lstCatalogFunction[i].FunctionName);
                    
            //        int intIndex = lstTreeViewModel.FindIndex(t => t.NodeName == lstCatalogFunction[i].CatalogName);
            //        lstTreeViewModel[intIndex].Children.Add(treeViewChildren);
                    
            //    }
            //}
            
            //tvFunction.ItemsSourceData = lstTreeViewModel;
        }
    }
}
