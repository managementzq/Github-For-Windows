using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Tianyue.Domain;
using Tianyue.Domain.Configuration;
using Tianyue.Domain.Enum;
using Tianyue.Facade;
using Tianyue.Utility.Extension;
using Tianyue.Utility.Helper;

namespace Tianyue.Dream.WPF.MainPage
{
    /// <summary>
    /// pgPageFunction.xaml 的交互逻辑
    /// </summary>
    public partial class pgFunctionCatalog : Page
    {
        public pgFunctionCatalog()
        {
            InitializeComponent();
        }
        
        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            BindingCombox();

            PageQuery_Click(null, null);
        }
        
        private void BindingCombox()
        {

            List<FunctionCatalogView> lstFunctionCatalog = GlobalFacade.ConfigurationFacade.GetAllFunctionCatalog().FindAll(mc => mc.Disable == false).ToList();
            WpfUiHelper.BindComboBox(lstFunctionCatalog, ddlParentFunctionQuery, "FCID", "FunctionName");
            WpfUiHelper.BindComboBox(lstFunctionCatalog, ddlParentFunctionEdit, "FCID", "FunctionName");
            WpfUiHelper.BindComboBox(lstFunctionCatalog, ddlParentFunctionAdd, "FCID", "FunctionName");

            List<FormPageView> lstFormPage = GlobalFacade.ConfigurationFacade.GetAllFormPage().FindAll(fp => fp.Disable == false).ToList();
            WpfUiHelper.BindComboBox(lstFormPage, ddlFormPageQuery, "FPID", "FormPageName");
            WpfUiHelper.BindComboBox(lstFormPage, ddlFormPageEdit, "FPID", "FormPageName");
            WpfUiHelper.BindComboBox(lstFormPage, ddlFormPageAdd, "FPID", "FormPageName");

        }

        private FunctionCatalog functionCatalogEdit = null;

        private void PageQuery_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                PageQuery_Click(null, null);
            }
        }

        private void PageQuery_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FunctionCatalog catalogFunctionQuery = new FunctionCatalog();
                catalogFunctionQuery.FunctionCode = txtQueryFunctionCode.Text;
                catalogFunctionQuery.FunctionName = txtQueryFunctionName.Text;

                if(ddlParentFunctionQuery.SelectedIndex > 0)
                {
                    FunctionCatalogView navigationCatalog = ddlParentFunctionQuery.SelectedItem as FunctionCatalogView;
                    catalogFunctionQuery.PFCID = navigationCatalog.PFCID;
                }
                if (ddlFormPageQuery.SelectedIndex > 0)
                {
                    FormPageView formPage = ddlFormPageQuery.SelectedItem as FormPageView;
                    catalogFunctionQuery.FPID = formPage.FPID;
                }
                
                List<FunctionCatalogView> lstFunctionCatalogQuery = GlobalFacade.ConfigurationFacade.GetFunctionCatalogList(catalogFunctionQuery).ToList();

                dgQuery.ItemsSource = lstFunctionCatalogQuery;

            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg("btnLogin_Click>>" + ex.Message, true);
            }

        }

        /// <summary>
        /// gridview的绑定列方法，用于隐藏一些列
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {
                DataGrid dg = (DataGrid)sender;
                Hashtable htDataGridColumn = new Hashtable();
                FunctionCatalogView catalogFunctionView = new FunctionCatalogView();

                Hashtable htAllProperty = ClassHelper.TraversePropertyType(catalogFunctionView);
               
                foreach(DictionaryEntry property in htAllProperty)
                {
                    if (!property.Value.ToString().Contains("Guid"))
                    {
                        htDataGridColumn.Add(property.Key, "");
                    }
                }
                
                foreach (DataGridColumn c in dg.Columns)
                {
                    if (!htDataGridColumn.Contains(c.SortMemberPath))
                    {
                        c.Visibility = Visibility.Hidden;
                    }
                }
                //LanguageHelper.SetDataGridViewLanguage(dg);
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".radGridView_AutoGeneratedColumns>>" + ex.Message, true);
            }
        }

        private void DataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (this.dgQuery.SelectedIndex == -1)
            {
                return;
            }

            FunctionCatalogView functionCatalogSelect = dgQuery.Items[dgQuery.SelectedIndex] as FunctionCatalogView;

            if (functionCatalogSelect == null)
            {
                return;
            }

            functionCatalogEdit = new FunctionCatalog();
            functionCatalogEdit.FCID = functionCatalogSelect.FCID;
            functionCatalogEdit.FunctionCode = functionCatalogSelect.FunctionCode;
            functionCatalogEdit.FunctionName = functionCatalogSelect.FunctionName;
            functionCatalogEdit.CatalogIcon = functionCatalogSelect.CatalogIcon;
            functionCatalogEdit.Sequence = functionCatalogSelect.Sequence;
            functionCatalogEdit.Description = functionCatalogSelect.Description;
            functionCatalogEdit.CreatedUser = functionCatalogSelect.CreatedUserGuid;
            functionCatalogEdit.CreatedTime = functionCatalogSelect.CreatedTime;
            functionCatalogEdit.Disable = functionCatalogSelect.Disable;

            //tbMainContent.SelectedItem = tbiEdit;

            txtFunctionCodeEdit.Text = functionCatalogEdit.FunctionCode;
            txtFunctionNameEdit.Text = functionCatalogEdit.FunctionName;
            txtCatalogIconEdit.Text = functionCatalogEdit.CatalogIcon;
            ddlParentFunctionEdit.SelectedValue = functionCatalogSelect.PFCID;
            ddlFormPageEdit.SelectedValue = functionCatalogSelect.FPID;
            txtSequenceEdit.Text = functionCatalogEdit.Sequence.ToString();
            txtDescriptionEdit.Text = functionCatalogEdit.Description;
            cbDisableEdit.IsChecked = functionCatalogEdit.Disable;

            tbMainContent.SelectedItem = tbiEdit;
        }

        private void btnSubmitEdit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                functionCatalogEdit = VerifyData(OperationType.Edit);

                if (functionCatalogEdit == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.UpdateSingleFunctionCatalog(functionCatalogEdit);

            }
            catch (Exception excp)
            {

            }
        }

        private void btnCancelEdit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSubmitAdd_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                FunctionCatalog functionCatalogAdd = new FunctionCatalog();
                functionCatalogAdd = VerifyData(OperationType.Add);

                if (functionCatalogAdd == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.InsertSingleFunctionCatalog(functionCatalogAdd);

            }
            catch(Exception excp)
            {

            }
        }

        private void btnCancelAdd_Click(object sender, RoutedEventArgs e)
        {

        }


        private FunctionCatalog VerifyData(OperationType operationType)
        {
            FunctionCatalog catalogFunction = new FunctionCatalog();
            if(operationType == OperationType.Add)
            {
                if(txtFunctionCodeAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFunctionNameAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtFunctionRouteAdd.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //    return null;
                //}
                //if (txtPageParameterAdd.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                
                catalogFunction.FCID = Guid.NewGuid();
                catalogFunction.FunctionCode = txtFunctionCodeAdd.Text; 
                catalogFunction.FunctionName = txtFunctionNameAdd.Text;
                catalogFunction.CatalogIcon = txtCatalogIconAdd.Text;
                if(ddlFormPageAdd.SelectedIndex>0)
                {
                    catalogFunction.FPID = Guid.Parse(ddlFormPageAdd.SelectedValue.ToString());
                }
                if (ddlParentFunctionAdd.SelectedIndex > 0)
                {
                    catalogFunction.PFCID = Guid.Parse(ddlParentFunctionAdd.SelectedValue.ToString());
                }
                catalogFunction.Sequence = Int32.Parse(txtSequenceAdd.Text);
                catalogFunction.Description = txtDescriptionAdd.Text;
                catalogFunction.Disable = cbDisableAdd.IsChecked == null ? false : (bool)cbDisableAdd.IsChecked;
                catalogFunction.CreatedUser = GlobalVariable.UserEntity.UID;
                catalogFunction.CreatedTime = DateTime.Now;
            }
            else
            {
                if (functionCatalogEdit == null)
                    return null;

                if (txtFunctionCodeEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFunctionNameEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtFunctionRouteEdit.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //    return null;
                //}
                //if (txtPageParameterEdit.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }

                catalogFunction.FCID = functionCatalogEdit.FCID;
                catalogFunction.FunctionCode = txtFunctionCodeEdit.Text;
                catalogFunction.FunctionName = txtFunctionNameEdit.Text;
                catalogFunction.CatalogIcon = txtCatalogIconEdit.Text;
                if (ddlFormPageEdit.SelectedIndex > 0)
                {
                    catalogFunction.FPID = Guid.Parse(ddlFormPageEdit.SelectedValue.ToString());
                }
                if (ddlParentFunctionEdit.SelectedIndex > 0)
                {
                    catalogFunction.PFCID = Guid.Parse(ddlParentFunctionEdit.SelectedValue.ToString());
                }
                //catalogFunction.FPID = Guid.Parse(ddlFormPageEdit.SelectedValue.ToString());
                //catalogFunction.PFCID = Guid.Parse(ddlParentFunctionEdit.SelectedValue.ToString());
                catalogFunction.Sequence = Int32.Parse(txtSequenceEdit.Text);
                catalogFunction.Description = txtDescriptionEdit.Text;
                catalogFunction.Disable = cbDisableEdit.IsChecked == null ? false : (bool)cbDisableEdit.IsChecked;
                catalogFunction.CreatedUser = functionCatalogEdit.CreatedUser;
                catalogFunction.CreatedTime = functionCatalogEdit.CreatedTime;
                catalogFunction.ModifiedUser = GlobalVariable.UserEntity.UID;
                catalogFunction.ModifiedTime = DateTime.Now;

            }

            return catalogFunction;

        }
        
        private void txtSequence_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            try
            {
                if ((e.Key >= Key.NumPad0 && e.Key <= Key.NumPad9) ||
                    (e.Key >= Key.D0 && e.Key <= Key.D9) || e.Key == Key.Back ||
                     e.Key == Key.Left || e.Key == Key.Right)
                {
                    if (e.KeyboardDevice.Modifiers != ModifierKeys.None)
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (e.Key != Key.Tab)
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".txtPackingQtyE_PreviewKeyDown>>" + ex.Message, true);
            }
        }

    }
}
