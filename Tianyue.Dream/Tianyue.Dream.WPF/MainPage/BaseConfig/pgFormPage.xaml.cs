using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Tianyue.Domain;
using Tianyue.Domain.Configuration;
using Tianyue.Domain.Enum;
using Tianyue.Facade;
using Tianyue.Utility.Extension;
using Tianyue.Utility.Helper;

namespace Tianyue.Dream.WPF.MainPage
{
    /// <summary>
    /// pgFormPage.xaml 的交互逻辑
    /// </summary>
    public partial class pgFormPage : System.Windows.Controls.Page
    {
        public pgFormPage()
        {
            InitializeComponent();
        }

        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            Query_Click(null, null);
        }


        private Domain.Configuration.FormPage formPageEdit = null;

        private void Query_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                Query_Click(null, null);
            }
        }

        private void Query_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Domain.Configuration.FormPage formPage = new Domain.Configuration.FormPage();
                formPage.FormPageCode = txtQueryFormPageCode.Text;
                formPage.FormPageName = txtQueryFormPageName.Text;

                List<FormPageView> lstFormPage = GlobalFacade.ConfigurationFacade.GetFormPageList(formPage).ToList();

                dgQuery.ItemsSource = lstFormPage;

            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg("btnLogin_Click>>" + ex.Message, true);
            }

        }

        /// <summary>
        /// gridview的绑定列方法，用于隐藏一些列
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {
                DataGrid dg = (DataGrid)sender;
                Hashtable htDataGridColumn = new Hashtable();
                FormPageView pf = new FormPageView();

                Hashtable htAllProperty = ClassHelper.TraversePropertyType(pf);
               
                foreach(DictionaryEntry property in htAllProperty)
                {
                    if (!property.Value.ToString().Contains("Guid"))
                    {
                        htDataGridColumn.Add(property.Key, "");
                    }
                }
                
                foreach (DataGridColumn c in dg.Columns)
                {
                    if (!htDataGridColumn.Contains(c.SortMemberPath))
                    {
                        c.Visibility = Visibility.Hidden;
                    }
                }
                //LanguageHelper.SetDataGridViewLanguage(dg);
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".radGridView_AutoGeneratedColumns>>" + ex.Message, true);
            }
        }

        private void DataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (this.dgQuery.SelectedIndex == -1)
            {
                return;
            }

            FormPageView formPageSelect = dgQuery.Items[dgQuery.SelectedIndex] as FormPageView;

            if (formPageSelect == null)
            {
                return;
            }

            formPageEdit = new Domain.Configuration.FormPage();
            formPageEdit.FPID = formPageSelect.FPID;
            formPageEdit.FormPageCode = formPageSelect.FormPageCode;
            formPageEdit.FormPageName = formPageSelect.FormPageName;
            formPageEdit.FormPageParameter = formPageSelect.FormPageParameter;
            formPageEdit.FormPageRoute = formPageSelect.FormPageRoute;
            formPageEdit.Sequence = formPageSelect.Sequence;
            formPageEdit.Description = formPageSelect.Description;
            formPageEdit.CreatedUser = formPageSelect.CreatedUserGuid;
            formPageEdit.CreatedTime = formPageSelect.CreatedTime;
            formPageEdit.Disable = formPageSelect.Disable;

            //tbMainContent.SelectedItem = tbiEdit;

            txtFormPageCodeEdit.Text = formPageEdit.FormPageCode;
            txtFormPageNameEdit.Text = formPageEdit.FormPageName;
            txtFormPageParameterEdit.Text = formPageEdit.FormPageParameter;
            txtFormPageRouteEdit.Text = formPageEdit.FormPageRoute;
            txtSequenceEdit.Text = formPageEdit.Sequence.ToString();
            txtDescriptionEdit.Text = formPageEdit.Description;
            cbDisableEdit.IsChecked = formPageEdit.Disable;

            tbMainContent.SelectedItem = tbiEdit;
        }

        private void btnSubmitEdit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                formPageEdit = VerifyData(OperationType.Edit);

                if (formPageEdit == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.UpdateSingleFormPage(formPageEdit);

            }
            catch (Exception excp)
            {

            }
        }

        private void btnCancelEdit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSubmitAdd_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Domain.Configuration.FormPage formPageAdd = new Domain.Configuration.FormPage();
                formPageAdd = VerifyData(OperationType.Add);

                if (formPageAdd == null)
                    return;

                bool blAddResult = GlobalFacade.ConfigurationFacade.InsertSingleFormPage(formPageAdd);

            }
            catch(Exception excp)
            {

            }
        }

        private void btnCancelAdd_Click(object sender, RoutedEventArgs e)
        {

        }


        private FormPage VerifyData(OperationType operationType)
        {
            Domain.Configuration.FormPage formPage = new Domain.Configuration.FormPage();
            if(operationType == OperationType.Add)
            {
                if(txtFormPageCodeAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFormPageNameAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFormPageRouteAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtFormPageParameterAdd.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceAdd.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                
                formPage.FPID = Guid.NewGuid();
                formPage.FormPageCode = txtFormPageCodeAdd.Text;
                formPage.FormPageName = txtFormPageNameAdd.Text;
                formPage.FormPageRoute = txtFormPageRouteAdd.Text;
                formPage.FormPageParameter = txtFormPageParameterAdd.Text;
                formPage.Sequence = Int32.Parse(txtSequenceAdd.Text);
                formPage.Description = txtDescriptionAdd.Text;
                formPage.Disable = cbDisableAdd.IsChecked == null ? false : (bool)cbDisableAdd.IsChecked;
                formPage.CreatedUser = GlobalVariable.UserEntity.UID;
                formPage.CreatedTime = DateTime.Now;
            }
            else
            {
                if (formPageEdit == null)
                    return null;

                if (txtFormPageCodeEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFormPageNameEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                if (txtFormPageRouteEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }
                //if (txtFormPageParameterEdit.Text.IsNullOrEmptyOrWhiteSpace())
                //{
                //return;
                //}
                if (txtSequenceEdit.Text.IsNullOrEmptyOrWhiteSpace())
                {
                    return null;
                }

                formPage.FPID = formPageEdit.FPID;
                formPage.FormPageCode = txtFormPageCodeEdit.Text;
                formPage.FormPageName = txtFormPageNameEdit.Text;
                formPage.FormPageRoute = txtFormPageRouteEdit.Text;
                formPage.FormPageParameter = txtFormPageParameterEdit.Text;
                formPage.Sequence = Int32.Parse(txtSequenceEdit.Text);
                formPage.Description = txtDescriptionEdit.Text;
                formPage.Disable = cbDisableEdit.IsChecked == null ? false : (bool)cbDisableEdit.IsChecked;
                formPage.CreatedUser = formPageEdit.CreatedUser;
                formPage.CreatedTime = formPageEdit.CreatedTime;
                formPage.ModifiedUser = GlobalVariable.UserEntity.UID;
                formPage.ModifiedTime = DateTime.Now;

            }

            return formPage;

        }


        private void txtSequence_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            try
            {
                if ((e.Key >= Key.NumPad0 && e.Key <= Key.NumPad9) ||
                    (e.Key >= Key.D0 && e.Key <= Key.D9) || e.Key == Key.Back ||
                     e.Key == Key.Left || e.Key == Key.Right)
                {
                    if (e.KeyboardDevice.Modifiers != ModifierKeys.None)
                    {
                        e.Handled = true;
                    }
                }
                else
                {
                    if (e.Key != Key.Tab)
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                //LogHelper.LogMsg(strClass + ".txtPackingQtyE_PreviewKeyDown>>" + ex.Message, true);
            }
        }
    }
}
